/** * Webflow Scheduler Enhancement Script * This script should be added to the Webflow scheduler page to enable form data passthrough * It detects stored form data and enhances the default HubSpot iframe with pre-filled data */ (function () { "use strict"; const DEBUG = window.location.search.includes("debug=true"); function log(...args) {  if (DEBUG) console.log("[Webflow Scheduler Fix]", ...args); } const SCHEDULER_CONFIG = {  sole_prop: {  url: "https://meetings.hubspot.com/bz/consultation",  name: "Round Robin Consultation",  description: "For all practices (round-robin)",  },  s_corp: {  url: "https://meetings.hubspot.com/bz/consultations",   name: "S-Corp Consultation",  description: "For multi-owner practices",  }, }; function getStoredFormData() {  try {  const localStorageData = localStorage.getItem("hubspot_form_data");  if (localStorageData) {   const formData = JSON.parse(localStorageData);   log("Found form data in localStorage:", formData);   return { formData: formData, source: "localStorage" };  }  } catch (e) {  log("localStorage error:", e);  }  try {  const storedData = sessionStorage.getItem("scheduler_router_data");  if (storedData) {   const data = JSON.parse(storedData);   log("Found router data in sessionStorage:", data);   sessionStorage.removeItem("scheduler_router_data"); // Clear after reading   return { formData: data.formData, schedulerType: data.scheduler_type, source: "sessionStorage" };  }  } catch (e) {  log("sessionStorage error:", e);  }  try {  const getCookie = (name) => {   const value = `; ${document.cookie}`;   const parts = value.split(`; ${name}=`);   if (parts.length === 2) return parts.pop().split(";").shift();  };  const schedulerType = getCookie("scheduler_type");  const formDataCookie = getCookie("form_data");  if (schedulerType || formDataCookie) {   const formData = formDataCookie ? JSON.parse(atob(formDataCookie)) : {};   document.cookie = "scheduler_type=; path=/; max-age=0";   document.cookie = "form_data=; path=/; max-age=0";   log("Found data in cookies:", { schedulerType, formData });   return { formData: formData, schedulerType: schedulerType, source: "cookies" };  }  } catch (e) {  log("cookie error:", e);  }  return null; } function buildEnhancedSchedulerUrl(formData, schedulerType = "sole_prop") {  const config = SCHEDULER_CONFIG[schedulerType] || SCHEDULER_CONFIG.sole_prop;  const url = new URL(config.url);  url.searchParams.set("embed", "true");  const fieldMappings = {  email: ["email", "email_address"],  firstName: ["firstname", "first_name", "fname"],  lastName: ["lastname", "last_name", "lname"],  company: ["company", "practice_name", "business_name"],  phone: ["phone", "phone_number", "telephone"],  };  Object.entries(fieldMappings).forEach(([paramName, fieldNames]) => {  for (const fieldName of fieldNames) {   if (formData[fieldName]) {   url.searchParams.set(paramName, formData[fieldName]);   log(`Mapping ${fieldName} -> ${paramName}: ${formData[fieldName]}`);   break;   }  }  });  const utmParams = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"];  utmParams.forEach((param) => {  if (formData[param]) {   url.searchParams.set(param, formData[param]);  }  });  log("Built enhanced scheduler URL:", url.toString());  return url.toString(); } function enhanceExistingIframe() {  log("Looking for existing HubSpot iframe...");  const iframeContainer = document.querySelector('.meetings-iframe-container');  const iframe = document.querySelector('iframe[src*="meetings.hubspot.com"]') ||      document.querySelector('iframe[src*="hsforms.com"]');  if (!iframeContainer && !iframe) {  log("No HubSpot iframe found");  return false;  }  const storedData = getStoredFormData();  if (!storedData || !storedData.formData) {  log("No stored form data found, leaving iframe as-is");  return false;  }  log("Found stored form data, enhancing iframe...");  const enhancedUrl = buildEnhancedSchedulerUrl(storedData.formData, "sole_prop");  if (iframeContainer) {  log("Updating iframe container");  iframeContainer.setAttribute('data-src', enhancedUrl);  const existingIframe = iframeContainer.querySelector('iframe');  if (existingIframe) {   existingIframe.src = enhancedUrl;   log("Updated existing iframe src");  }  } else if (iframe) {  log("Updating iframe directly");  iframe.src = enhancedUrl;  }  try {  if (typeof window.posthog !== "undefined") {   window.posthog.capture("scheduler_enhanced_on_webflow", {   source: storedData.source,   has_email: !!storedData.formData.email,   has_name: !!(storedData.formData.firstname || storedData.formData.first_name),   });  }  if (typeof window.amplitude !== "undefined") {   window.amplitude.track("scheduler_enhanced_on_webflow", {   source: storedData.source,   has_email: !!storedData.formData.email,   });  }  } catch (e) {  log("Analytics error:", e);  }  log("Iframe enhancement completed");  return true; } function addDebugPanel() {  if (!DEBUG) return;  const debugPanel = document.createElement('div');  debugPanel.style.cssText = `  position: fixed;  top: 20px;  right: 20px;  background: rgba(0, 0, 0, 0.9);  color: white;  padding: 15px;  border-radius: 8px;  font-family: monospace;  font-size: 12px;  max-width: 400px;  z-index: 10000;  border: 2px solid #226752;  `;  const storedData = getStoredFormData();  const urlParams = new URLSearchParams(window.location.search);  debugPanel.innerHTML = `  <strong>üîß Webflow Scheduler Debug</strong><br><br>  <strong>Form Data Sources:</strong><br>  üìÅ localStorage: ${localStorage.getItem("hubspot_form_data") ? "‚úÖ Found" : "‚ùå Empty"}<br>  üíæ sessionStorage: ${sessionStorage.getItem("scheduler_router_data") ? "‚úÖ Found" : "‚ùå Empty"}<br>  üç™ Cookies: ${document.cookie.includes("form_data=") ? "‚úÖ Found" : "‚ùå Empty"}<br><br>  <strong>URL Parameters:</strong><br>  ${urlParams.toString() || "None"}<br><br>  <strong>Stored Data:</strong><br>  ${storedData ? `Source: ${storedData.source}<br>Fields: ${Object.keys(storedData.formData || {}).join(", ")}` : "None found"}  `;  document.body.appendChild(debugPanel);  let isDragging = false;  let dragOffset = { x: 0, y: 0 };  debugPanel.addEventListener('mousedown', (e) => {  isDragging = true;  dragOffset.x = e.clientX - debugPanel.offsetLeft;  dragOffset.y = e.clientY - debugPanel.offsetTop;  });  document.addEventListener('mousemove', (e) => {  if (isDragging) {   debugPanel.style.left = (e.clientX - dragOffset.x) + 'px';   debugPanel.style.top = (e.clientY - dragOffset.y) + 'px';   debugPanel.style.right = 'auto';  }  });  document.addEventListener('mouseup', () => {  isDragging = false;  }); } function init() {  log("Webflow Scheduler Fix initializing...");  addDebugPanel();  if (enhanceExistingIframe()) {  log("Successfully enhanced existing iframe");  return;  }  setTimeout(() => {  log("Retrying iframe enhancement after delay...");  enhanceExistingIframe();  }, 2000);  const observer = new MutationObserver((mutations) => {  mutations.forEach((mutation) => {   mutation.addedNodes.forEach((node) => {   if (node.nodeType === 1) { // Element node    const iframe = node.querySelector && node.querySelector('iframe[src*="meetings.hubspot.com"]');    if (iframe || (node.tagName === 'IFRAME' && node.src && node.src.includes('meetings.hubspot.com'))) {    log("New HubSpot iframe detected, enhancing...");    setTimeout(() => enhanceExistingIframe(), 100);    }   }   });  });  });  observer.observe(document.body, {  childList: true,  subtree: true  });  log("Webflow Scheduler Fix initialized"); } if (document.readyState === "loading") {  document.addEventListener("DOMContentLoaded", init); } else {  init(); } if (DEBUG) {  window.WebflowSchedulerFix = {  getStoredFormData,  buildEnhancedSchedulerUrl,  enhanceExistingIframe,  config: SCHEDULER_CONFIG,  init  }; } log("Webflow Scheduler Fix script loaded"); })(); 